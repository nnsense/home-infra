### haproxy-aux.cfg ### BEGIN

frontend http-external
 mode http
  bind 0.0.0.0:8980 name v4
  bind :::8980 name v6
  http-request redirect scheme https

frontend https-external
  mode http
  bind 0.0.0.0:8943 name v4 crt /etc/haproxy/certs/frontend ssl alpn h2,http/1.1
  bind :::8943 name v6 crt /etc/haproxy/certs/frontend ssl alpn h2,http/1.1

  # Pass static files through varnish first (unless it comes back from varnish)
  acl varnish_available nbsrv(varnish_varnish_http) ge 1

  # Redirect everything but varnish to https
  http-request set-header X-Unique-ID %[uuid()] unless { hdr(X-Unique-ID) -m found }

  # Disable auth for specific backends
  acl public-frontends hdr(host) -f /config/public_hosts.txt

  # Authelia needs these headers to work correctly
  http-request set-header X-Forwarded-Proto https
  http-request set-header X-Forwarded-Host  %[req.hdr(Host)]
  http-request set-header X-Forwarded-Uri   %[path]

  # Authelia  Config:             Backend name            Path         Method  Request  Success  Failure
  http-request lua.auth-intercept authelia_authelia_http   /api/verify  HEAD    *        remote-*        -
  http-request redirect location https://gate.sko.ai/?rd=%[url] if !public-frontends !{ var(txn.auth_response_successful) -m bool }

  # Security Headers
  http-response set-header X-XSS-Protection "1; mode=block"
  http-response set-header X-Content-Type-Options "nosniff"
  http-response set-header X-Frame-Options "deny"
  http-response set-header Referrer-Policy "strict-origin-when-cross-origin"

  # Use varnish if the content looks static and is not a miss from varnish
  #use_backend varnish_varnish_http if static_content varnish_available varnish_http_verb !already_varnished
  use_backend varnish_varnish_http

### haproxy-aux.cfg ### END
